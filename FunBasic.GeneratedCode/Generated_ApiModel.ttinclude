<#@ include file="HeaderCommon.ttinclude"#>

<#+
  class ParameterDescriptor : BaseEntity<MethodDescriptor>
  {
    public ParameterDescriptor (string type, string name, string defaultValue)
    {
      Type          = type          ?? S_NoType ;
      Name          = name          ?? S_NoName ;
      DefaultValue  = defaultValue  ?? ""       ;
    }

    public bool HasDefaultValue
    {
      get
      {
        return !string.IsNullOrEmpty (DefaultValue);
      }
    }

    public readonly string Type         ;
    public readonly string Name         ;
    public readonly string DefaultValue ;
  }

  static ParameterDescriptor PD (string type, string name, string defaultValue = null)
  {
    return new ParameterDescriptor (type, name, defaultValue);
  }

  class Prefix
  {
    public Prefix (string name, ParameterDescriptor[] prependWith)
      : this (false, name, prependWith)
    {
    }

    public Prefix (bool isInternal, string name, ParameterDescriptor[] prependWith)
    {
      IsInternal  = isInternal;
      Name        = (name       ?? S_NoName) + "Input";
      PrependWith = prependWith ?? new ParameterDescriptor[0];
    }

    public readonly bool                  IsInternal  ;
    public readonly string                Name        ;
    public readonly ParameterDescriptor[] PrependWith ;
  }

  class MethodDescriptor : BaseContainer<Root, ParameterDescriptor>
  {
    public MethodDescriptor (Prefix prefix, string verb, string noun)
    {
      Prefix  = prefix  ?? GlobalInput;
      Verb    = verb    ?? S_NoName   ;
      Noun    = noun    ?? S_NoName   ;
    }

    public readonly Prefix  Prefix  ;
    public readonly string  Verb    ;
    public readonly string  Noun    ;
  }

  static readonly Prefix InternalInput    = new Prefix (true, "Internal"  , new ParameterDescriptor[] {}        );
  static readonly Prefix GlobalInput      = new Prefix ("Global"          , new ParameterDescriptor[] {}        );
  static readonly Prefix BitmapInput      = new Prefix ("Bitmap"          , new [] { PD ("int", "bitmapId")     });
  static readonly Prefix BrushInput       = new Prefix ("Brush"           , new [] { PD ("int", "brushId")      });
  static readonly Prefix VisualInput      = new Prefix ("Visual"          , new [] { PD ("int", "visualId")     });
  static readonly Prefix TextFormatInput  = new Prefix ("TextFormat"      , new [] { PD ("int", "textFormatId") });

  static readonly MethodDescriptor[] model = new MethodDescriptor []
    {
      new MethodDescriptor  (InternalInput    , "Do"            , "Nothing"             ) ,
      new MethodDescriptor  (InternalInput    , "Discard"       , "Window"              ) ,
      new MethodDescriptor  (InternalInput    , "Create"        , "BitmapFromBits"      )
      {
        PD ("int"     , "bitmapId"),
        PD ("byte[]"  , "bits"    ),
      },

      new MethodDescriptor  (GlobalInput      , "Set"           , "Background")
      {
        PD ("string", "color", "\"#004\""),
      },
      new MethodDescriptor  (GlobalInput      , "Clear"         , "Visuals"             ),
      new MethodDescriptor  (GlobalInput      , "Hide"          , "Window"              ),
      new MethodDescriptor  (GlobalInput      , "Show"          , "Window"              ),
      new MethodDescriptor  (GlobalInput      , "Wait"          , "ForDownloads"        ),
      new MethodDescriptor  (GlobalInput      , "Wait"          , "ForRefresh"          ),

      new MethodDescriptor  (BitmapInput      , "Download"      , "Bitmap"              )
      {
        PD ("string", "uri", "\"http://cliparts.co/cliparts/BTg/ERG/BTgERG4oc.png\""),
      },

      new MethodDescriptor  (BrushInput       , "Create"        , "SolidBrush"          )
      {
        PD ("string", "color"     , "\"#fff\"" ),
      },
      new MethodDescriptor  (BrushInput       , "Create"        , "LinearGradientBrush" )
      {
        PD ("double", "startX"    , "0.0"       ),
        PD ("double", "startY"    , "0.0"       ),
        PD ("double", "endX"      , "0.0"       ),
        PD ("double", "endY"      , "1.0"       ),
        PD ("string", "extendMode", "\"mirror\""),
      },
      new MethodDescriptor  (BrushInput       , "Create"        , "RadialGradientBrush" )
      {
        PD ("double", "centerX"   , "0.5"       ),
        PD ("double", "centerY"   , "0.5"       ),
        PD ("double", "radiusX"   , "1.0"       ),
        PD ("double", "radiusY"   , "1.0"       ),
        PD ("double", "offsetX"   , "-0.25"     ),
        PD ("double", "offsetY"   , "0.25"      ),
        PD ("string", "extendMode", "\"mirror\""),
      },
      new MethodDescriptor  (BrushInput       , "Create"        , "GradientStopForBrush" )
      {
        PD ("string", "color"     , "\"#fff\""),
        PD ("double", "offset"    , "0.0"     ),
      },

      new MethodDescriptor  (TextFormatInput  , "Create"        , "TextFormat"          )
      {
        PD ("string", "fontFamily"  , "\"Tahoma\""),
        PD ("double", "fontSize"    , "24.0"      ),
      },

      new MethodDescriptor  (VisualInput      , "Remove"        , "Visual"              ),
      new MethodDescriptor  (VisualInput      , "Clone"         , "Visual"              )
      {
        PD ("int"   , "cloneVisualId" ),
      },
      new MethodDescriptor  (VisualInput      , "Move"          , "Visual"              )
      {
        PD ("double", "x" , "100.0" ),
        PD ("double", "y" , "100.0" ),
      },
      new MethodDescriptor  (VisualInput      , "Move"          , "VisualToTop"         ),
      new MethodDescriptor  (VisualInput      , "Move"          , "VisualToBottom"      ),
      new MethodDescriptor  (VisualInput      , "Resize"        , "Visual"              )
      {
        PD ("double", "width"   , "100.0" ),
        PD ("double", "height"  , "100.0" ),
      },
      new MethodDescriptor  (VisualInput      , "Create"        , "BitmapVisual"        )
      {
        PD ("int"     , "bitmapId"            ),
        PD ("double"  , "opacity"   , "1.0"   ),
        PD ("double"  , "centerX"   , "344.0" ),
        PD ("double"  , "centerY"   , "257.0" ),
        PD ("double"  , "width"     , "488.0" ),
        PD ("double"  , "height"    , "314.0" ),
      },
      new MethodDescriptor  (VisualInput      , "Create"        , "RectangleVisual"     )
      {
        PD ("int"     , "fillBrushId"   , "3"     ),
        PD ("int"     , "strokeBrushId" , "1"     ),
        PD ("double"  , "strokeWidth"   , "3.0"   ),
        PD ("double"  , "centerX"       , "200.0" ),
        PD ("double"  , "centerY"       , "100.0" ),
        PD ("double"  , "width"         , "100.0" ),
        PD ("double"  , "height"        , "100.0" ),
      },
      new MethodDescriptor  (VisualInput      , "Create"        , "EllipseVisual"       )
      {
        PD ("int"     , "fillBrushId"   , "4"     ),
        PD ("int"     , "strokeBrushId" , "1"     ),
        PD ("double"  , "strokeWidth"   , "3.0"   ),
        PD ("double"  , "centerX"       , "100.0" ),
        PD ("double"  , "centerY"       , "200.0" ),
        PD ("double"  , "width"         , "100.0" ),
        PD ("double"  , "height"        , "100.0" ),
      },
      new MethodDescriptor  (VisualInput      , "Create"        , "TextVisual"          )
      {
        PD ("int"     , "fillBrushId"   , "1"                 ),
        PD ("int"     , "textFormatId"  , "0"                 ),
        PD ("double"  , "centerX"       , "200.0"             ),
        PD ("double"  , "centerY"       , "200.0"             ),
        PD ("double"  , "width"         , "100.0"             ),
        PD ("double"  , "height"        , "100.0"             ),
        PD ("string"  , "text"          , "\"Hello World!\""  ),
      },
    };

  static string ToTypeTupleNames (ParameterDescriptor [] parameters)
  {
    if (parameters.Length == 0)
    {
      return "";
    }
    else
    {
      var types = parameters.Select (p => p.Name).ToArray ();
      return "(" + string.Join (", ", types) + ")";
    }
  }
#>
