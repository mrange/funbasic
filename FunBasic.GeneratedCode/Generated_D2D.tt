<#@ include file      ="Generated_ApiModel.ttinclude" #>
<#@ output  extension = ".cs"                         #>

namespace FunBasic.Library
{
  using FunBasic.DirectX.ApiModel;

  static partial class D2D
  {
<#
  var prepend = "";

  var grouped = model
    .GroupBy (md => md.Prefix)
    .OrderBy (g => g.Key.Name)
    .ToArray ();

  foreach (var g in grouped)
  {
    var prefix = g.Key;

    if (prefix.IsInternal)
    {
      continue;
    }

#>
    // ------------------------------------------------------------------------
    // Prefix: <#=prefix.Name#>
    // ------------------------------------------------------------------------

<#
  foreach (var md in g.OrderBy (md => md.Verb).ThenBy (md => md.Noun))
  {
    var pds = prefix.PrependWith.Concat (md).ToArray ();
#>
    // Method: <#=md.Verb#><#=md.Noun#> <#=ToTypeTupleNames (pds)#>
    public static void <#=md.Verb#><#=md.Noun#> (
<#
  prepend = "  ";
  foreach (var p in pds)
  {
#>
      <#=prepend#><#=LeftJustify (p.Type, 10)#> <#=p.Name#>
<#
    prepend = ", ";
  }
#>
      )
    {
      Scene.SendInput (
        Input.New<#=prefix.Name#> (
<#
  prepend = "  ";
  foreach (var p in prefix.PrependWith)
  {
#>
          <#=prepend#><#=p.Name#>
<#
    prepend = ", ";
  }

  var ipds = md.ToArray ();
  if (ipds.Length > 0)
  {
#>
          <#=prepend#><#=prefix.Name#>.New<#=md.Verb#><#=md.Noun#> (
<#
  prepend = "  ";
  foreach (var p in ipds)
  {
#>
            <#=prepend#><#=p.Name#>
<#
    prepend = ", ";
  }
#>
            )
<#
  }
  else
  {
#>
          <#=prepend#><#=prefix.Name#>.<#=md.Verb#><#=md.Noun#>
<#
  }
#>
          )
        );
    }

<#
  }
  }
#>
  }
}
