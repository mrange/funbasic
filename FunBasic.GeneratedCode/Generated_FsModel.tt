namespace FunBasic.DirectX.ApiModel
<#@ include file      ="Generated_ApiModel.ttinclude" #>
<#@ output  extension = ".fs"                         #>

<#
  var prepend = "";

  var grouped = model
    .GroupBy (md => md.Prefix)
    .OrderBy (g => g.Key.Name)
    .ToArray ();

  foreach (var g in grouped)
  {
    var prefix = g.Key;

#>
  // Prefix: <#=prefix.Name#>
  type <#=prefix.Name#> =
<#
  foreach (var md in g.OrderBy (md => md.Verb).ThenBy (md => md.Noun))
  {
    var pds = md.ToArray ();
#>
  // Method: <#=md.Verb#><#=md.Noun#> <#=ToTypeTupleNames (pds)#>
  | <#=LeftJustify (md.Verb + md.Noun, 20)#> <#=ToTypeTuple (pds)#>
<#
  }
#>

<#
  }
#>

  type Input =
<#
  foreach (var g in grouped)
  {
    var prefix = g.Key;
    var pds = prefix.PrependWith.Concat (new [] {PD (prefix.Name, "payload")}).ToArray ();
#>
  // Prefix: <#=prefix.Name#> <#=ToTypeTupleNames (pds)#>
  | <#=LeftJustify (prefix.Name, 20)#> <#=ToTypeTuple (pds)#>
<#
  }
#>

<#+
  static string ToTypeTuple (ParameterDescriptor [] parameters)
  {
    if (parameters.Length == 0)
    {
      return "";
    }
    else
    {
      var types = parameters.Select (p => p.Name + ":" + p.Type).ToArray ();
      return "of " + string.Join ("*", types);
    }
  }
#>